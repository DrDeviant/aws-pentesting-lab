#! /bin/bash

echo "Name of the script: $0" >> /home/kali/init_debug.txt
echo "Total number of arguments: $#" >> /home/kali/init_debug.txt
echo "Values of all the arguments: $@" >> /home/kali/init_debug.txt

echo "---"  >> /home/kali/init_debug.txt
echo "Number of users: ${NUM_USERS}" >> /home/kali/init_debug.txt
echo "User names: ${USERS}"   >> /home/kali/init_debug.txt
echo "---"  >> /home/kali/init_debug.txt


# Update package lists
apt-get update


# install locales
apt-get install locales-all -y
# touch /var/lib/cloud/instance/locale-check.skip

# install pip
apt-get install python3-pip -y

# install docker
#curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
#echo 'deb [arch=amd64] https://download.docker.com/linux/debian buster stable' | tee /etc/apt/sources.list.d/docker.list
#apt install -y docker.io
#systemctl enable docker --now
#sudo usermod -aG docker kali

# install scoutsuite
#pip install ScoutSuite

# install pacu
#git clone https://github.com/RhinoSecurityLabs/pacu && mv ./pacu/ /home/kali/
#pip install -r /home/kali/pacu/requirements.txt
#chown -R kali:kali /home/kali/pacu/*
#cd /home/kali/pacu && bash install.sh && cd -

# install cloudsplaining - cloudsplaining.readthedocs.io/
# Cloudsplaining is an AWS IAM Security Assessment tool 
# that identifies violations of least privilege and generates
# a risk-prioritized report. 
#disabled# pip3 install cloudsplaining


# Wireguard VPN Install & Set-Up
echo "Wireguard install and configuration"  >> /home/kali/init_debug.txt
apt-get install iptables -y
apt-get install wireguard -y


sysctl -w net.ipv4.ip_forward=1             # Turn on IP forwarding 
sysctl -w net.ipv6.conf.all.forwarding=1    # Turn on IP forwarding 

# key generation server 
wg genkey | tee /etc/wireguard/server-privatekey | wg pubkey | tee /etc/wireguard/server-publickey
# key generation clients
wg genkey | tee /etc/wireguard/client-privatekey | wg pubkey | tee /etc/wireguard/client-publickey
for user in ${USERS}
do
  echo "Creating wireguard key for user : $${user}"  >> /home/kali/init_debug.txt
  wg genkey | tee /etc/wireguard/client-privatekey-$${user} | wg pubkey | tee /etc/wireguard/client-publickey-$${user}
done

    

#ip link add dev wg0 type wireguard                   # create interface
#ip address add dev wg0 10.0.0.10 peer 10.0.0.11
#wg set wg0 listen-port 51820 private-key ./server-privatekey
#wg set wg0 peer $(cat /etc/wireguard/client-publickey) allowed-ips 10.0.0.0/16,10.0.1.5/32 endpoint 10.0.0.11:21841
#ip link set up dev wg0                               # activate interface
# Set routing for wg-eth0
#iptables -A FORWARD -i %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE;iptables -A FORWARD -o %i -j ACCEPT

# Create server config file
cat << WG0__EOF > /etc/wireguard/wg0.conf
[Interface]
Address = 10.0.10.1/24
ListenPort = 51820
PrivateKey = $(cat /etc/wireguard/server-privatekey)

PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE;iptables -A FORWARD -o %i -j ACCEPT
PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE;iptables -D FORWARD -o %i -j ACCEPT

[Peer]
PublicKey = $(cat /etc/wireguard/client-publickey)
AllowedIPs = 10.0.10.0/24

WG0__EOF


for user in ${USERS}
do
  echo "Addind public key to wireguard server for user : $${user}"  >> /home/kali/init_debug.txt
  echo "" >> /etc/wireguard/wg0.conf
  echo "[Peer]" >> /etc/wireguard/wg0.conf
  echo "PublicKey = $(cat /etc/wireguard/client-publickey-$${user})" >> /etc/wireguard/wg0.conf
  echo "AllowedIPs = 10.0.10.0/24" >> /etc/wireguard/wg0.conf
  echo "" >> /etc/wireguard/wg0.conf
done

chmod 600 /etc/wireguard/{server-privatekey*,wg0.conf}
wg-quick up wg0     # start server

# Create client file
cat << EOF_CLIENT > /home/kali/client_vpn.wg
[Interface]
PrivateKey = $(cat /etc/wireguard/client-privatekey)
ListenPort = 21841
Address = 10.0.10.2/32

[Peer]
PublicKey = $(cat /etc/wireguard/server-publickey)
AllowedIPs = 10.0.10.0/24,10.0.0.0/24,10.0.1.0/24
Endpoint = $(curl http://169.254.169.254/latest/meta-data/public-ipv4):51820

# This is for if you're behind a NAT and
# want the connection to be kept alive.
PersistentKeepalive = 25

EOF_CLIENT

for user in ${USERS}
do
  echo "Creating VPN Client file for user : $${user}"  >> /home/kali/init_debug.txt
  cat << EOF_iCLIENT > /home/kali/client_vpn_$${user}.wg
[Interface]
PrivateKey = $(cat /etc/wireguard/client-privatekey-$${user})
ListenPort = 21841
Address = 10.0.10.2/32

[Peer]
PublicKey = $(cat /etc/wireguard/server-publickey)
AllowedIPs = 10.0.10.0/24,10.0.0.0/24,10.0.1.0/24
Endpoint = $(curl http://169.254.169.254/latest/meta-data/public-ipv4):51820

# This is for if you're behind a NAT and
# want the connection to be kept alive.
PersistentKeepalive = 25

EOF_iCLIENT

done



## Create users
for user in ${USERS}
do
  echo "Creating user: $${user}"  >> /home/kali/init_debug.txt
  useradd -m -d /home/$${user} -s /bin/bash $${user}
  echo "Passw0rd!" | passwd â€“-stdin $${user}
  # Create rsa pair keys
  mkdir -p /home/$${user}/.ssh
  ssh-keygen -f /home/$${user}/.ssh/id_rsa -t rsa -N '' -q
  cat /home/$${user}/.ssh/id_rsa.pub >> /home/$${user}/.ssh/authorized_keys
  cp /home/$${user}/.ssh/id_rsa /home/kali/user_$${user}.key
done 


## Change home folder to do not allow access for non-owners
chmod 750 /home/*

## Owner and permisions for VPN and User keys
chown kali:kali /home/kali/user*.key    # chg owner
chown kali:kali /home/kali/client_vpn*.wg    # chg owner


# ToDO: instalar xrdp (tal vez con maquinas t2 no sea una solucion viable.)

# Auditing for linux with Auditd
apt-get install auditd audispd-plugins -y

# Create audit rules: guide https://www.tekfik.com/kb/linux/audit/audit-or-track-all-commands-linux
cat << EOF_AUDITD >> /etc/audit/rules.d/audit.rules

# Track all sudo commands" >> /etc/audit/rules.d/audit.rules
-a always,exit -F arch=b64 -S execve -F euid=0 -F auid>=1000 -F auid!=-1 -F key=sudo_log
-a always,exit -F arch=b32 -S execve -F euid=0 -F auid>=1000 -F auid!=-1 -F key=sudo_log

# Track all commands for USERS
-a exit,always -F arch=b32 -S execve -k allcmds -F auid>=1000 -F key=users_log
-a exit,always -F arch=b64 -S execve -k allcmds -F auid>=1000 -F key=users_log

EOF_AUDITD

service auditd start

# ToDO: send audit log to CloudWatch
#https://www.rapidspike.com/blog/how-to-send-log-files-to-aws-cloudwatch-ubuntu/

# Possible Update: IDS/IPS 
# apt-get install suricata -y
# setup https://redmine.openinfosecfoundation.org/projects/suricata/wiki/Basic_Setup
# https://suricata.readthedocs.io/en/latest/quickstart.html#running-suricata
# ubnt setup https://kifarunix.com/install-and-setup-suricata-on-ubuntu-18-04/

# Command line audit logging
# https://askubuntu.com/questions/1044669/bash-history-log-all-commands-to-syslog
#echo "" >> /etc/profile
#echo "# Command line audit logging" >> /etc/profile.d/cmdline_audit.sh
#echo "trap 'logger -p local1.notice -t bash -i -- \"\$${USER}:\$${COMMAND}\"' DEBUG" >> /etc/profile.d/cmdline_audit.sh



# /etc/rsyslog.conf
#echo "# command line audit logging" >> /etc/rsyslog.d/22-userlog.conf
#echo "local1.* -/var/log/cmdline"   >> /etc/rsyslog.d/22-userlog.conf

#/etc/init.d/rsyslog restart

