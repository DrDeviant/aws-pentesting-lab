#! /bin/bash

apt-get update

# install pip
apt-get install python3-pip -y

# install docker
#curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
#echo 'deb [arch=amd64] https://download.docker.com/linux/debian buster stable' | tee /etc/apt/sources.list.d/docker.list
#apt install -y docker.io
#systemctl enable docker --now
#sudo usermod -aG docker kali

# install scoutsuite
#pip install ScoutSuite

# install pacu
#git clone https://github.com/RhinoSecurityLabs/pacu && mv ./pacu/ /home/kali/
#pip install -r /home/kali/pacu/requirements.txt
#chown -R kali:kali /home/kali/pacu/*
#cd /home/kali/pacu && bash install.sh && cd -

# install cloudsplaining - cloudsplaining.readthedocs.io/
# Cloudsplaining is an AWS IAM Security Assessment tool 
# that identifies violations of least privilege and generates
# a risk-prioritized report. 
#disabled# pip3 install cloudsplaining


# Wireguard VPN Install & Set-Up
apt-get install iptables -y
apt-get install wireguard -y


sysctl -w net.ipv4.ip_forward=1             # Turn on IP forwarding 
sysctl -w net.ipv6.conf.all.forwarding=1    # Turn on IP forwarding 

# key generation server 
wg genkey | tee /etc/wireguard/server-privatekey | wg pubkey | tee /etc/wireguard/server-publickey
# key generation clients
wg genkey | tee /etc/wireguard/client-privatekey | wg pubkey | tee /etc/wireguard/client-publickey
for i in {1..9}
do
  wg genkey | tee /etc/wireguard/client-privatekey$${i} | wg pubkey | tee /etc/wireguard/client-publickey$${i}
done

    
#wg genkey | tee /etc/wireguard/client-privatekey1 | wg pubkey | tee /etc/wireguard/client-publickey1
#wg genkey | tee /etc/wireguard/client-privatekey2 | wg pubkey | tee /etc/wireguard/client-publickey2
#wg genkey | tee /etc/wireguard/client-privatekey3 | wg pubkey | tee /etc/wireguard/client-publickey3
#wg genkey | tee /etc/wireguard/client-privatekey4 | wg pubkey | tee /etc/wireguard/client-publickey4
#wg genkey | tee /etc/wireguard/client-privatekey5 | wg pubkey | tee /etc/wireguard/client-publickey5



#ip link add dev wg0 type wireguard                   # create interface
#ip address add dev wg0 10.0.0.10 peer 10.0.0.11
#wg set wg0 listen-port 51820 private-key ./server-privatekey
#wg set wg0 peer $(cat /etc/wireguard/client-publickey) allowed-ips 10.0.0.0/16,10.0.1.5/32 endpoint 10.0.0.11:21841
#ip link set up dev wg0                               # activate interface
# Set routing for wg-eth0
#iptables -A FORWARD -i %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE;iptables -A FORWARD -o %i -j ACCEPT

# Create server config file
cat << WG0__EOF > /etc/wireguard/wg0.conf
[Interface]
Address = 10.0.10.1/24
ListenPort = 51820
PrivateKey = $(cat /etc/wireguard/server-privatekey)

PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE;iptables -A FORWARD -o %i -j ACCEPT
PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE;iptables -D FORWARD -o %i -j ACCEPT

[Peer]
PublicKey = $(cat /etc/wireguard/client-publickey)
AllowedIPs = 10.0.10.0/24

WG0__EOF

for i in {1..9}
do
    cat << WGi__EOF >> /etc/wireguard/wg0.conf

[Peer]
PublicKey = $(cat /etc/wireguard/client-publickey$${i})
AllowedIPs = 10.0.10.0/24

WGi__EOF

chmod 600 /etc/wireguard/{server-privatekey*,wg0.conf}
wg-quick up wg0     # start server

# Create client file
cat << EOF_CLIENT > /home/kali/client_vpn.wg
[Interface]
PrivateKey = $(cat /etc/wireguard/client-privatekey)
ListenPort = 21841
Address = 10.0.10.2/32

[Peer]
PublicKey = $(cat /etc/wireguard/server-publickey)
AllowedIPs = 10.0.10.0/24,10.0.0.0/24,10.0.1.0/24
Endpoint = $(curl http://169.254.169.254/latest/meta-data/public-ipv4):51820

# This is for if you're behind a NAT and
# want the connection to be kept alive.
PersistentKeepalive = 25

EOF_CLIENT

for i in {1..9}
do
cat << EOF_CLIENT > /home/kali/client_vpn$${i}.wg
[Interface]
PrivateKey = $(cat /etc/wireguard/client-privatekey$${i})
ListenPort = 21841
Address = 10.0.10.2/32

[Peer]
PublicKey = $(cat /etc/wireguard/server-publickey)
AllowedIPs = 10.0.10.0/24,10.0.0.0/24,10.0.1.0/24
Endpoint = $(curl http://169.254.169.254/latest/meta-data/public-ipv4):51820

# This is for if you're behind a NAT and
# want the connection to be kept alive.
PersistentKeepalive = 25

EOF_CLIENT
done

chown kali:kali /home/kali/client_vpn*.wg    # chg owner


# ToDO: instalar xrdp (tal vez con maquinas t2 no sea una solucion viable.)


# Possible Update: IDS/IPS 
# apt-get install suricata -y
# setup https://redmine.openinfosecfoundation.org/projects/suricata/wiki/Basic_Setup
# https://suricata.readthedocs.io/en/latest/quickstart.html#running-suricata
# ubnt setup https://kifarunix.com/install-and-setup-suricata-on-ubuntu-18-04/
