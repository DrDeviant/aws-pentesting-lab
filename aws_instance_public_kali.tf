#EC2 Instances : Kali Linux

# Create key-pair
resource "tls_private_key" "kali-rsa-key" {
  algorithm = "RSA"
}

resource "aws_key_pair" "kali-key-pair" {
  key_name   = "kali"
  public_key = tls_private_key.kali-rsa-key.public_key_openssh

  depends_on = [ tls_private_key.kali-rsa-key ]
}


data "aws_ami" "kaliami" {
  most_recent = true
  owners = ["679593333241"]  # 679593333241 = Kali Linux

  filter {
    name   = "name"
    values = ["*kali-linux*"]
  }
}

resource "aws_instance" "kali" {
  ami                         = data.aws_ami.kaliami.id
  instance_type               = var.instance_type
  key_name                    = aws_key_pair.kali-key-pair.key_name
  private_ip                  = "10.0.0.5"
  associate_public_ip_address = true
  subnet_id                   = aws_subnet.publicSubnet.id
  vpc_security_group_ids      = [aws_security_group.SecurityGroup-Kali.id]
  user_data                   = templatefile("${path.module}/user_data/payload-kali.sh", {
    #publicip = "${aws_instance.kali.public_ip}"
    NUM_USERS = length(var.kali-users)
    USERS = join(" ", var.kali-users)
  })
  monitoring                  = true    // for debug


  root_block_device {
    volume_size = var.volume_size
  }
  tags = {
    Name = "KaliInstance"
  }

  # Wait 180sec and then retrieve wireguard client file using scp
  provisioner "local-exec" {
    command = "sleep 180 && scp -i kali.pem -o StrictHostKeyChecking=no -o IdentitiesOnly=yes kali@${aws_instance.kali.public_ip}:/home/kali/{client_vpn*.wg,user_*.key} ."
  }

  provisioner "local-exec" {
    when        = destroy
    command     = "rm client_vpn*.wg user_*.key"
  }


  depends_on = [
    aws_vpc.VPC,
    aws_subnet.publicSubnet, 
    aws_route_table.PublicRouteTable, 
    aws_security_group.SecurityGroup-Kali,
    aws_key_pair.kali-key-pair
  ]
}


// Asociate EIP - no longer needed
#resource "aws_eip" "bar" {
#  vpc = true
#
#  instance                  = aws_instance.kali.id
#  associate_with_private_ip = "10.0.0.5"
#  depends_on                = [aws_internet_gateway.InternetGateway]
#}