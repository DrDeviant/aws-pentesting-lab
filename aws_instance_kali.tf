#EC2 Instances : Kali Linux

# Create key-pair
resource "tls_private_key" "kali-rsa-key" {
  algorithm = "RSA"
}

resource "aws_key_pair" "kali-key-pair" {
  key_name   = "kali"
  public_key = tls_private_key.kali-rsa-key.public_key_openssh

  depends_on = [ tls_private_key.kali-rsa-key ]
}


data "template_file" "user_data" {
  template = file("payload-kali.sh")
  #vars = {
  #  publicip = "${aws_instance.kali.public_ip}"
  #}
}

# Lookup AMI ID in AWS (tobedone)
#data "aws_ami" "kali" {
#  executable_users = ["self"]
#  most_recent      = true
#  name_regex       = "kali-linux-2020.4"
#  owners           = ["aws-marketplace"]
#}

resource "aws_instance" "kali" {
  ami                         = var.kali-ami[var.aws-region] 
  instance_type               = var.instance_type
  key_name                    = aws_key_pair.kali-key-pair.key_name
  private_ip                  = "10.0.0.5"
  associate_public_ip_address = true
  subnet_id                   = aws_subnet.publicSubnet.id
  vpc_security_group_ids      = [aws_security_group.SecurityGroup-Kali.id]
  user_data                   = data.template_file.user_data.rendered   // payload-kali.sh
  monitoring = true // for debug


  root_block_device {
    volume_size = var.volume_size
  }
  tags = {
    Name = "KaliInstance"
  }

  # Descargar el archivo para el cliente VPN de wireguard
  provisioner "local-exec" {
    # Wait for 2 minutes, and retrieve wireguard client
    command = "sleep 180 && scp -i kali.pem -o StrictHostKeyChecking=no -o IdentitiesOnly=yes kali@${aws_instance.kali.public_ip}:/home/kali/client_vpn.wg ."
  }


  depends_on = [
    aws_vpc.VPC,
    aws_subnet.publicSubnet, 
    aws_route_table.PublicRouteTable, 
    aws_security_group.SecurityGroup-Kali,
    aws_key_pair.kali-key-pair
  ]
}

// Asociate EIP
resource "aws_eip" "bar" {
  vpc = true

  instance                  = aws_instance.kali.id
  associate_with_private_ip = "10.0.0.5"
  depends_on                = [aws_internet_gateway.InternetGateway]
}